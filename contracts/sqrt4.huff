#define function sqrt(uint256) pure returns(uint256)

//i could multiply everything by 1000 and divide by 1000 later
//so we have space for decimals while the function is running

//gets the square root of an input
#define macro SQRT() = takes (1) returns (1) {
    // takes: [number]
    0x01    // [y, number]
    dup2    // [guess, y, number]
    estimate    // [estimate_dest, guess, y, number]
    jump    // [guess, y, number]

    estimate:
    add     // [guess + y, number]
    0x02    // [2, guess + y, number]
    swap1   // [guess + y, 2, number]
    div     // [new_guess, number]
    dup1    // [guess, guess, number]
    dup3    // [number, guess, guess, number]
    div     // [number / guess, guess, number]

    // [new_y, guess, number]

    swap1   // [guess, y, number]
    dup2    // [y, guess, y, number]
    dup2    // [guess, y, guess, y, number]
    eq      // [is_equal, guess, y, number]
    iszero  // [is_not_equal, guess, y, number]

    estimate    // [estimate_jumpdest, is_not_equal, guess, y, number]
    jumpi   // [guess, y, number]

    swap1   // [y, sqrt_number, number]
    pop     // [sqrt_number, number]
    swap1   // [number, sqrt_number]
    pop     // [sqrt_number]
}



#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr
    dup1 0x677342ce eq sqrt jumpi

    sqrt:
        SQRT()
}

