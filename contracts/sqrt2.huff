#define function sqrt(uint256) pure returns(uint256)

#define macro SQRT() = takes (0) returns (3) {
    0x04 calldataload
    0x01//y
    0x02//2,y,calldata
    dup3
    div //approx,y,calldata
    0x01//for later 1,approx, y, calldata
    dup3//y,1,y,approx,calldata
    dup4
    sub//approx - y, 1, y, approx, calldata

    //mess with this tomorrow for debugging sake
    //this check may determine if our check is working as expected
    lt//the 1 we set aside is used
    guessing jumpi

    //if the first check works (4) then return
    0x00 mstore
    0x20 0x00 mstore

    //something wrong with the loop
    //or takes too much memory for the evm
    //the check may be wrong


    guessing:
    //order of stack approx, y, calldata
    //we need to add the logic first then the check for recursion
    //first we need to update approx
    pop
    //approx = (number + y)/2
    //y,calldata
    0x02//for the div later
    dup3
    dup3
    add
    div
    //new approx, y, calldata
    //give y new value now
    swap1 pop //swap into y then remove its value
    dup1//approx,approx,calldata
    dup3
    div
    //new y is now made and first
    //y,approx,calldata

    swap1//will help later

    //do checks with xor and iszero
    0x01
    dup2 dup2 //y,approx,1,approx,y,calldata
    sub//y-approx,1,approx,y,calldata
    gt //bool,approx,y,calldata
    
    //second check bc it needs to be absolute value
    0x01//1,bool,approx,y,calldata
    dup3 dup5 //approx,y, 1, bool, approx,y, calldata
    sub//approx-y, 1, bool, approx, y, calldata
    gt

    //bool,bool,approx,y,calldata

    xor //new bool, approx, y, calldata
    //iszero
    guessing jumpi

    //if the number is accurate enough
    0x00 mstore
    0x20 0x00 return
    
    //do whatever with the guess
}

#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 0x677342ce eq sqrt jumpi

    sqrt:
        SQRT()
}