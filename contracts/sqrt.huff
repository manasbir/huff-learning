#define function sqrt(uint256) pure returns(uint256)

#define macro SQRT() = takes (1) returns (1) {
    0x04 calldataload
    0x02 //2 , calldata
    dup2 //calldata, 2 , calldata
    div //calldata/2, calldata
    swap1//can be removed if we run the code as approx then calldata      //calldata, approx
    0x01 //1,calldata, approx
    dup4 //approx,1, calldata, approx
    sub //approx-1, calldata, approx
    0x01 //1, new_approx, calldata, aprox
    dup2 // approx, 1 , calldata, approx
    gt //is greater than 1?
    0x01 //should be y
    swap1 //is greater than?, y, calldata, approx

    while_loop jumpi
    swap3
    0x00 mstore //returns answer if first guess was right
    0x20 0x00 return

    while_loop: //y is at the top of the stack and the calldata is 2nd, approx should be 3rd ready to be replaced
    swap2
    pop
    dup1
    dup3 add
    0x02 swap1
    div //approximation is top of stack now, y is second, calldata is 3rd
    swap1 // y is first and needs to be reassigned
    pop//approx, calldata
    swap1//calldata, approx
    dup2//approx,calldata,approx
    dup2//calldata, approx, calldata, approx
    div//new y, calldata, approx
    dup1 swap3 //approx,y, y, calldata, approx
    sub//approx - y, y, calldata, approx
    0x01 //1, approx - y, y, calldata, approx
    dup2 gt //is approx - y  > 1
    while_loop jumpi //recursion if it isnt accurate enough
    //0x00, y, calldata, approx

    swap3 0x00 mstore
    0x20 0x00 return

}

#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 0x677342ce eq sqrt jumpi

    sqrt:
        SQRT()
}