#define function sqrt(uint256) pure returns(uint256)


//i could multiply everything by 1000 and divide by 1000 later
//so we have space for decimals while the function is running
#define macro SQRT() = takes (0) returns (3) {
    //make estimate
    0x04 calldataload
    0x01 //y
    //y and approx should be able to be switched with no worries
    dup2//approx
    //no point in initial checks
    estimate jump

    estimate:
    //make approx = (approx + y)/2
    //stack is approx, y, calldata
    add //approx + y, calldata
    //y wil be popped anyways
    //and approx will be replaced
    0x02 //for division
    swap1
    div
    //new approx value, calldata

    //now we need to y = calldata/approx
    dup1
    dup3
    div

    //y, approx, calldata

    swap1

    //check if good
    dup2 dup2
    eq
    iszero

    estimate jumpi


    0x00 mstore
    0x20 0x00 return
     


    
    //do whatever with the guess
}

#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 0x677342ce eq sqrt jumpi

    sqrt:
        SQRT()
}

